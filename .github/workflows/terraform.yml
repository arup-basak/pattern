name: "Terraform"

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

      # On push to "master", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_IP: ${{ secrets.EC2_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@$EC2_IP '
            # Update system
            sudo yum update -y

            # Install nginx if not already installed
            if ! command -v nginx &> /dev/null; then
              sudo amazon-linux-extras install nginx1 -y
            fi

            # Clone or pull latest code
            if [ -d "pattern" ]; then
              cd pattern
              git pull
            else
              git clone https://github.com/plaid/pattern.git
              cd pattern
            fi

            # Create .env file
            cp .env.template .env
            echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID }}" >> .env
            echo "PLAID_SECRET=${{ secrets.PLAID_SECRET }}" >> .env
            echo "PLAID_ENV=sandbox" >> .env
            echo "PLAID_PRODUCTS=transactions" >> .env
            echo "PLAID_COUNTRY_CODES=US,CA" >> .env
            echo "PLAID_REDIRECT_URI=http://localhost:3001/oauth-link" >> .env

            # Update ngrok.yml
            echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}" > ngrok/ngrok.yml

            # Start the application
            make start

            # Configure nginx
            sudo tee /etc/nginx/conf.d/pattern.conf > /dev/null <<EOT
            server {
              listen 80;
              server_name localhost;

              location / {
                proxy_pass http://localhost:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host \$host;
                proxy_cache_bypass \$http_upgrade;
              }
            }
            EOT

            # Test nginx configuration
            sudo nginx -t

            # Restart nginx
            sudo systemctl restart nginx

            # Ensure nginx starts on boot
            sudo systemctl enable nginx
          '
          rm -f private_key.pem
