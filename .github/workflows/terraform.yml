name: "Terraform"

on:
  push:
    branches: ["master"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

      # On push to "master", build or change infrastructure according to Terraform configuration files
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./terraform

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3

      - name: Debug EC2 IP
        run: echo "EC2 IP is ${{ secrets.EC2_IP }}"

      - name: Deploy to Ubuntu EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_IP: ${{ secrets.EC2_IP }}
          GITHUB_USERNAME: ${{ secrets.GITHUB_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_SECRET: ${{ secrets.PLAID_SECRET }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
            # Your deployment commands here
            # (The rest of your deployment script remains the same)
          '
          rm -f private_key.pem
              # Update and upgrade the system
              sudo apt update && sudo apt upgrade -y

              # Install required packages
              sudo apt install -y apt-transport-https ca-certificates curl software-properties-common

              # Install Docker
              if ! command -v docker &> /dev/null; then
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                sudo usermod -aG docker ubuntu
                sudo systemctl enable docker
              fi

              # Install Docker Compose
              if ! command -v docker-compose &> /dev/null; then
                sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
              fi

              # Install Nginx
              sudo apt install -y nginx
              sudo systemctl enable nginx

              # Install Make
              sudo apt install -y make

              # Install ngrok
              if ! command -v ngrok &> /dev/null; then
                curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
                echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
                sudo apt update && sudo apt install ngrok
              fi

              # Clone or update the repository
              if [ -d "pattern" ]; then
                cd pattern
                git pull
              else
                git clone https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/plaid/pattern.git
                cd pattern
              fi

              # Create .env file
              cp .env.template .env
              echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID }}" >> .env
              echo "PLAID_SECRET=${{ secrets.PLAID_SECRET }}" >> .env
              echo "PLAID_ENV=sandbox" >> .env
              echo "PLAID_PRODUCTS=transactions" >> .env
              echo "PLAID_COUNTRY_CODES=US,CA" >> .env
              echo "PLAID_REDIRECT_URI=http://localhost:3001/oauth-link" >> .env

              # Update ngrok.yml
              mkdir -p ngrok
              echo "authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}" > ngrok/ngrok.yml

              # Start the application
              make start

              # Configure Nginx
              sudo tee /etc/nginx/sites-available/pattern > /dev/null <<EOT
              server {
                listen 80;
                server_name localhost;

                location / {
                  proxy_pass http://localhost:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
                }
              }
              EOT

              # Enable the Nginx configuration
              sudo ln -sf /etc/nginx/sites-available/pattern /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default

              # Test Nginx configuration
              sudo nginx -t

              # Restart Nginx
              sudo systemctl restart nginx

              echo "Deployment completed successfully!"
            '
            rm -f private_key.pem
