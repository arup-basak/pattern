name: Deploy to AWS

on:
  push:
    branches:
      - final

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    outputs:
      public_ip: ${{ steps.terraform_output.outputs.public_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - name: Wait for EIP association
        run: sleep 30

      - name: Check Terraform State
        run: terraform show
        working-directory: ./terraform

      - name: List Terraform Outputs
        run: terraform output
        working-directory: ./terraform

      - name: Output Public IP
        id: terraform_output
        run: |
          echo "Attempting to retrieve public IP..."
          PUBLIC_IP=$(terraform output -raw public_ip || echo "FAILED")
          echo "Retrieved value: $PUBLIC_IP"
          if [ "$PUBLIC_IP" != "FAILED" ]; then
            echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          else
            echo "Failed to retrieve public IP"
            exit 1
          fi
        working-directory: ./terraform

      - name: Check EC2 and EIP Status
        run: |
          echo "Checking EC2 instance status..."
          aws ec2 describe-instances --filters "Name=tag:Name,Values=App Server" --query "Reservations[].Instances[].{State:State.Name,PublicIP:PublicIpAddress}"
          echo "Checking Elastic IP status..."
          aws ec2 describe-addresses --query "Addresses[].{PublicIP:PublicIp,InstanceId:InstanceId}"

  deploy:
    name: Deploy Application
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Upload deployment script
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > private_key
          chmod 600 private_key
          scp -v -o StrictHostKeyChecking=no -i private_key deploy.sh ec2-user@${{ needs.terraform.outputs.public_ip }}:/home/ec2-user/

      - name: SSH and execute deployment script
        run: |
          ssh -v -o StrictHostKeyChecking=no -i private_key ec2-user@${{ needs.terraform.outputs.public_ip }} 'bash /home/ec2-user/deploy.sh'
        env:
          PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
          PLAID_SECRET_SANDBOX: ${{ secrets.PLAID_SECRET_SANDBOX }}
          PLAID_SANDBOX_REDIRECT_URI: ${{ secrets.PLAID_SANDBOX_REDIRECT_URI }}
          PLAID_PRODUCTION_REDIRECT_URI: ${{ secrets.PLAID_PRODUCTION_REDIRECT_URI }}
          PLAID_ENV: ${{ secrets.PLAID_ENV }}

      - name: Clean up
        if: always()
        run: rm -f private_key